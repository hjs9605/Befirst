def solution(cards):
    answer = 0
    #그룹들의 길이를 담을 리스트
    rings = []
    #카드의 개수
    n = len(cards)
    #각 그룹에 속하는 카드를 넣을 리스트
    ring=[]
    #card 별로 visited 
    visited = [0 for i in range(n)]
    
    #card별로 그룹 찾기
    def findcard(card,ring):
        #이미 어떤 그룹에 속한 애로 돌아왔다면 지금 그룹 리턴
        if visited[card] != 0:
            return ring
        #어떤 그룹에 속하지 못했다면, 방문 처리하고, 지금 그룹에 넣기, 그리구 그 안에 인덱스로 가기
        else:
            visited[card] = 1
            ring.append(card)
            return findcard(cards[card]-1,ring)
    
    #1부터 카드까지 반복하면서 그룹의 길이 받아오기 
    #사실 다 안해도되는데 0인거도 하려고 그냥~~
    for i in range(n):
        rings.append(len(findcard(i,[])))
    
    #내림차순정렬
    rings=sorted(rings,reverse=True)
    #큰거 두개 
    answer = rings[0]*rings[1
                
    return answer